// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Labelvaluepair struct {
	Value string `json:"value"`
	Label string `json:"label"`
}

type NewTodo struct {
	Text   string `json:"text"`
	UserID string `json:"userId"`
}

type Timeseries struct {
	Time          *string `json:"time"`
	Block         *string `json:"Block"`
	BuildingName  *string `json:"BuildingName"`
	EquipmentName *string `json:"EquipmentName"`
	FunctionType  *string `json:"FunctionType"`
	Prefername    *string `json:"prefername"`
	ID            *string `json:"id"`
	Value         *string `json:"value"`
}

type Todo struct {
	ID     string `json:"id"`
	Text   string `json:"text"`
	Done   bool   `json:"done"`
	User   *User  `json:"user"`
	UserID string `json:"userId"`
}

type User struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type AggregationsType string

const (
	AggregationsTypeCount AggregationsType = "count"
	AggregationsTypeSum   AggregationsType = "sum"
	AggregationsTypeMean  AggregationsType = "mean"
	AggregationsTypeMax   AggregationsType = "max"
	AggregationsTypeMin   AggregationsType = "min"
	AggregationsTypeFirst AggregationsType = "first"
	AggregationsTypeLast  AggregationsType = "last"
)

var AllAggregationsType = []AggregationsType{
	AggregationsTypeCount,
	AggregationsTypeSum,
	AggregationsTypeMean,
	AggregationsTypeMax,
	AggregationsTypeMin,
	AggregationsTypeFirst,
	AggregationsTypeLast,
}

func (e AggregationsType) IsValid() bool {
	switch e {
	case AggregationsTypeCount, AggregationsTypeSum, AggregationsTypeMean, AggregationsTypeMax, AggregationsTypeMin, AggregationsTypeFirst, AggregationsTypeLast:
		return true
	}
	return false
}

func (e AggregationsType) String() string {
	return string(e)
}

func (e *AggregationsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AggregationsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AggregationsType", str)
	}
	return nil
}

func (e AggregationsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
